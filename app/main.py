"""
Ponto de entrada da aplica√ß√£o FastAPI.
"""
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
import time

from app.core.settings import settings
from app.core.logging_config import setup_logging
from app.routes.extract import router as extract_router
from app.routes.upload import router as upload_router

# Configurar logging
setup_logging()
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o."""
    # Startup
    logger.info("Iniciando aplica√ß√£o Process Extraction API")
    logger.info(f"Configura√ß√µes carregadas: {settings.api_title} v{settings.api_version}")
    
    yield
    
    # Shutdown
    logger.info("Encerrando aplica√ß√£o Process Extraction API")


# Rate limiting simples em mem√≥ria
request_counts = {}

async def rate_limit_middleware(request: Request, call_next):
    """Middleware simples de rate limiting."""
    # Pular rate limiting para requisi√ß√µes OPTIONS (CORS preflight)
    if request.method == "OPTIONS":
        response = await call_next(request)
        return response
    
    client_ip = request.client.host
    current_time = time.time()
    
    # Limpar contadores antigos (mais de 1 minuto)
    request_counts[client_ip] = [
        timestamp for timestamp in request_counts.get(client_ip, [])
        if current_time - timestamp < 60
    ]
    
    # Verificar limite (mais permissivo em desenvolvimento)
    max_requests = settings.rate_limit_requests if not settings.log_level == "DEBUG" else 1000
    if len(request_counts.get(client_ip, [])) >= max_requests:
        return JSONResponse(
            status_code=429,
            content={"detail": "Rate limit exceeded. Try again later."}
        )
    
    # Adicionar timestamp atual
    if client_ip not in request_counts:
        request_counts[client_ip] = []
    request_counts[client_ip].append(current_time)
    
    response = await call_next(request)
    return response


# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title=settings.api_title,
    description=settings.api_description,
    version=settings.api_version,
    lifespan=lifespan,
    docs_url="/docs" if settings.log_level == "DEBUG" else None,  # Docs apenas em debug
    redoc_url="/redoc" if settings.log_level == "DEBUG" else None,
    timeout=settings.api_timeout  # Timeout configur√°vel
)

# Middleware de seguran√ßa
app.add_middleware(TrustedHostMiddleware, allowed_hosts=["*"])  # Em produ√ß√£o, especificar hosts

# Rate limiting
app.middleware("http")(rate_limit_middleware)

# Configurar CORS - Vers√£o robusta para produ√ß√£o
import os

# Configurar origens permitidas para CORS
# Lista padr√£o de origens confi√°veis
default_origins = [
    "https://criaai-test.vercel.app",
    # URLs din√¢micas do Vercel (frontend)
    "https://criaai-test-git-main-fnsdeividys-projects.vercel.app",
    "https://criaai-test-fnsdeividys-projects.vercel.app",
    # URLs din√¢micas do Vercel (backend) - caso sejam usadas como frontend
    "https://criaai-test-afe7-xscdfc12f-fnsdeividys-projects.vercel.app",
    # Desenvolvimento local
    "http://localhost:3000",
    "http://localhost:5173",  # Vite dev server
    "http://localhost:8080",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5173",
    "http://127.0.0.1:8080"
]

# Adicionar suporte para URLs din√¢micas do Vercel baseadas no host atual
current_host = os.getenv("VERCEL_URL")
if current_host:
    # Adicionar a URL atual e varia√ß√µes comuns
    vercel_urls = [
        f"https://{current_host}",
        "https://criaai-test.vercel.app",  # URL principal
    ]
    default_origins.extend(vercel_urls)
    print(f"üîß URLs Vercel detectadas: {vercel_urls}")

# Tentar obter origens do ambiente
env_origins = os.getenv("ALLOWED_ORIGINS", "")
if env_origins:
    try:
        import json
        cors_origins = json.loads(env_origins)
        print(f"üîß CORS Origins do ENV: {cors_origins}")
    except:
        # Se falhar o parse, usar lista padr√£o
        cors_origins = default_origins
        print(f"üîß CORS Origins fallback (parse error): {cors_origins}")
else:
    # Usar lista padr√£o em vez de wildcard
    cors_origins = default_origins
    print(f"üîß CORS Origins padr√£o: {cors_origins}")

app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,  # Sempre permitir credentials com origens espec√≠ficas
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=[
        "Content-Type", 
        "Authorization", 
        "X-Requested-With",
        "Accept",
        "Origin",
        "Access-Control-Request-Method",
        "Access-Control-Request-Headers",
    ],
    max_age=3600,
)

# Rota de teste para CORS
@app.get("/cors-test")
async def cors_test():
    """Rota de teste para verificar se CORS est√° funcionando."""
    return {
        "message": "CORS est√° funcionando!",
        "allowed_origins": cors_origins,
        "timestamp": "2024-09-18"
    }

# Registrar routers
app.include_router(extract_router)
app.include_router(upload_router)


@app.get("/", tags=["health"])
async def root():
    """Endpoint de health check."""
    return {
        "message": "Process Extraction API est√° funcionando",
        "version": settings.api_version,
        "status": "healthy"
    }


@app.get("/health", tags=["health"])
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de da aplica√ß√£o."""
    return {
        "status": "healthy",
        "version": settings.api_version,
        "service": "process-extraction-api"
    }


if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level=settings.log_level.lower()
    )
